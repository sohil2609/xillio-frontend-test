{"version":3,"sources":["components/common/header/header.styles.jsx","components/common/header/header.component.jsx","components/common/text-input/text-input.component.jsx","components/common/custom-button/custom-button.component.jsx","components/search-user/search-user.styles.jsx","components/search-user/search-user.component.jsx","containers/user-repo/user-repo.styles.jsx","components/common/search-suggestion/search-suggestion.styles.jsx","components/common/search-suggestion/search-suggestion.component.jsx","service/user-repo.service.js","api-config.js","components/repo-list/repo-list.styles.jsx","components/repo-list/repo-list.component.jsx","components/common/withSpinner/withSpinner.styles.jsx","components/common/withSpinner/withSpinner.component.jsx","containers/user-repo/user-repo.component.jsx","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","styled","div","Header","title","data-test","TextInput","props","name","onChange","value","type","showLabel","label","placeholder","className","for","id","autoComplete","defaultProps","CustomButton","extraCssClass","text","onClick","UserFormComponent","form","SearchUser","query","onSubmit","UserRepoComponent","MessageComponent","SearchSuggestionsComponent","SearchSuggestions","list","displayKey","noOfSuggestion","ListGroup","as","slice","map","item","Item","action","key","getUsers","a","async","fetch","response","json","data","getRepos","username","pageNumber","RepoListComponent","RepoList","repos","repo","url","html_url","window","open","focus","language","SpinnerOverlay","SpinnerContainer","WithSpinner","WrappedComponent","isLoading","otherProps","UserRepo","useState","users","message","state","setState","setReposByPage","console","error","e","target","length","items","prevState","preventDefault","user","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1de94bf9.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const HeaderComponent = styled.div`\n\twidth: 100%;\n\tbackground-color: #003446;\n\tcolor: #fff;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tpadding: 12px;\n`;\n","import React from \"react\";\nimport { HeaderComponent } from \"./header.styles\";\n\nconst Header = ({ title }) => {\n  return (\n    <HeaderComponent data-test=\"headerComponent\">\n      <h1>{title}</h1>\n    </HeaderComponent>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst TextInput = (props) => {\n\tconst { name, onChange, value, type, showLabel, label, placeholder } = props;\n\treturn (\n\t\t<div className=\"form-group\">\n\t\t\t{showLabel && <label for=\"exampleInputEmail1\">{label}</label>}\n\t\t\t<input\n\t\t\t\tdata-test=\"textInput\"\n\t\t\t\tvalue={value}\n\t\t\t\ttype={type}\n\t\t\t\tclassName=\"form-control\"\n\t\t\t\tid={name}\n\t\t\t\tname={name}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tonChange={onChange}\n\t\t\t\tautoComplete=\"off\"\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nTextInput.defaultProps = {\n\tshowLabel: false,\n\ttype: 'text',\n\tlabel: ''\n};\n\nexport default TextInput;\n","import React from 'react';\n\nconst CustomButton = ({ extraCssClass, text, onClick, type }) => (\n\t<button className={`btn ${extraCssClass}`} type={type} onClick={onClick} data-test=\"customButton\">\n\t\t{text}\n\t</button>\n);\n\nexport default CustomButton;\n","import styled from 'styled-components';\n\nexport const UserFormComponent = styled.form`\n\tdisplay: flex;\n\tflex-direction: row;\n\tmargin: 16px 0;\n\twidth: 100%;\n\t.form-group {\n\t\twidth: 100%;\n\t\tmargin-bottom: 0;\n\t}\n\tbutton {\n\t\tmargin-left: 16px;\n\t}\n`;\n","import React from 'react';\nimport TextInput from '../common/text-input/text-input.component';\nimport CustomButton from '../common/custom-button/custom-button.component';\nimport { UserFormComponent } from './search-user.styles';\n\nconst SearchUser = ({ query, onChange, onSubmit }) => (\n\t<UserFormComponent onSubmit={onSubmit} data-test=\"UserFormComponent\">\n\t\t<TextInput\n\t\t\tvalue={query}\n\t\t\tname={'query'}\n\t\t\tonChange={onChange}\n\t\t\tplaceholder=\"Search User\"\n\t\t\tdata-test=\"textInputComponent\"\n\t\t/>\n\t\t<CustomButton extraCssClass=\"btn-primary\" type=\"submit\" text=\"Search\" data-test=\"searchButton\" />\n\t</UserFormComponent>\n);\n\nexport default SearchUser;\n","import styled from 'styled-components';\n\nexport const UserRepoComponent = styled.div`\n\twidth: 70%;\n\tmargin-top: 24px;\n`;\n\nexport const MessageComponent = styled.div`\n\tspan {\n\t\tfont-size: 16px;\n\t\tfont-weight: bold;\n\t}\n`;\n","import styled from 'styled-components';\n\nexport const SearchSuggestionsComponent = styled.div`\n\tposition: relative;\n\tul {\n\t\tposition: absolute;\n\t\ttop: -15px;\n\t}\n\tli {\n\t\tmin-width: 200px;\n\t\tcursor: pointer;\n\t}\n`;\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { SearchSuggestionsComponent } from './search-suggestion.styles';\n\nconst SearchSuggestions = ({ list, displayKey, onClick, noOfSuggestion }) => {\n\treturn (\n\t\t<SearchSuggestionsComponent>\n\t\t\t<ListGroup as=\"ul\">\n\t\t\t\t{list.slice(0, noOfSuggestion).map((item) => {\n\t\t\t\t\titem = displayKey ? item[displayKey] : item;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ListGroup.Item\n\t\t\t\t\t\t\tas=\"li\"\n\t\t\t\t\t\t\taction=\"true\"\n\t\t\t\t\t\t\tkey={item}\n\t\t\t\t\t\t\tvalue={item}\n\t\t\t\t\t\t\tonClick={() => onClick(item)}\n\t\t\t\t\t\t\tdata-test=\"searchItem\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ListGroup>\n\t\t</SearchSuggestionsComponent>\n\t);\n};\n\nSearchSuggestions.defaultProps = {\n\tnoOfSuggestion: 5\n};\n\nexport default SearchSuggestions;\n","import { GITHUB_API_ENDPOINT } from '../api-config';\n\nexport const getUsers = async (query) => {\n\tlet response = await fetch(`${GITHUB_API_ENDPOINT}search/users?q=${query}`);\n\tlet data = await response.json();\n\treturn data;\n};\n\nexport const getRepos = async (username, pageNumber) => {\n\tlet response = await fetch(`${GITHUB_API_ENDPOINT}users/${username}/repos?page=${pageNumber}`);\n\tlet data = await response.json();\n\treturn data;\n};\n","const GITHUB_API_ENDPOINT_DEFAULT = 'https://api.github.com/';\nexport const GITHUB_API_ENDPOINT =\n\tprocess.env.NODE_ENV === 'production' ? 'https://api.github.com/' : GITHUB_API_ENDPOINT_DEFAULT;\n","import { ListGroup } from 'react-bootstrap';\n\nimport styled from 'styled-components';\n\nexport const RepoListComponent = styled(ListGroup)`\n\tli {\n        cursor: pointer;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n    }\n`;\n","import React from 'react';\nimport { RepoListComponent } from './repo-list.styles';\nimport { ListGroup } from 'react-bootstrap';\n\nconst RepoList = ({ repos }) => {\n\tconst clickHandler = (url) => {\n\t\tlet win = window.open(url, '_blank');\n\t\twin.focus();\n\t};\n\treturn (\n\t\t<RepoListComponent>\n\t\t\t{repos.map((repo) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ListGroup.Item as=\"li\" action=\"true\" key={repo.name} onClick={() => clickHandler(repo.html_url)}>\n\t\t\t\t\t\t<span>{repo.name}</span>\n\t\t\t\t\t\t<span>{repo.language || 'NA'}</span>\n\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t);\n\t\t\t})}\n\t\t</RepoListComponent>\n\t);\n};\n\nexport default RepoList;\n","import styled from \"styled-components\";\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { SpinnerContainer, SpinnerOverlay } from \"./withSpinner.styles\";\n\nconst WithSpinner = WrappedComponent => {\n  return ({ isLoading, ...otherProps }) => {\n    return isLoading ? (\n      <SpinnerOverlay>\n        <SpinnerContainer />\n      </SpinnerOverlay>\n    ) : (\n      <WrappedComponent {...otherProps} />\n    );\n  };\n};\n\nexport default WithSpinner;\n","import React, { useState } from 'react';\nimport SearchUser from '../../components/search-user/search-user.component';\nimport { UserRepoComponent, MessageComponent } from './user-repo.styles';\nimport SearchSuggestions from '../../components/common/search-suggestion/search-suggestion.component';\nimport { getUsers, getRepos } from '../../service/user-repo.service';\nimport RepoList from '../../components/repo-list/repo-list.component';\nimport WithSpinner from '../../components/common/withSpinner/withSpinner.component';\n\nconst UserRepo = () => {\n\tconst [ state, setState ] = useState({\n\t\tusers: [],\n\t\trepos: [],\n\t\tmessage: '',\n\t\tquery: '',\n\t\tisLoading: false\n\t});\n\tconst { users, repos, query, message, isLoading } = state;\n\n\tconst onQueryChange = async (e) => {\n\t\tlet query = e.target.value;\n\t\tlet users = [];\n\t\tsetState({ ...state, query });\n\t\tif (query.length) {\n\t\t\ttry {\n\t\t\t\tlet data = await getUsers(query);\n\t\t\t\tusers = data.items ? [ ...data.items ] : [];\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t}\n\t\tsetState((prevState) => {\n\t\t\treturn { ...prevState, users };\n\t\t});\n\t};\n\n\tconst selectSuggestion = (user) => {\n\t\tsetState({ ...state, query: user, users: [] });\n\t};\n\n\tconst onSubmit = async (e) => {\n\t\te.preventDefault();\n\t\tawait setReposByPage(1);\n\t};\n\n\tconst setReposByPage = async (pageNumber) => {\n\t\ttry {\n\t\t\tsetState({ ...state, users: [], isLoading: true });\n\t\t\tlet data = await getRepos(query, pageNumber);\n\t\t\tif (data.message) {\n\t\t\t\tlet message = `Username - ${query} ${data.message}`;\n\t\t\t\tsetState({ ...state, message, isLoading: false });\n\t\t\t} else {\n\t\t\t\tsetState({ ...state, message: '', repos: [ ...data ] });\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\n\tconst RepoListComponent = WithSpinner(RepoList);\n\n\treturn (\n\t\t<UserRepoComponent className=\"user-repo\">\n\t\t\t<SearchUser query={query} onChange={onQueryChange} onSubmit={onSubmit} data-test=\"searchUser\" />\n\n\t\t\t<SearchSuggestions list={users} displayKey=\"login\" onClick={selectSuggestion} />\n\t\t\t{message ? (\n\t\t\t\t<MessageComponent data-test=\"messageComponent\">\n\t\t\t\t\t<span>{message}</span>\n\t\t\t\t</MessageComponent>\n\t\t\t) : (\n\t\t\t\t<RepoListComponent repos={repos} isLoading={isLoading} />\n\t\t\t)}\n\t\t</UserRepoComponent>\n\t);\n};\n\nexport default UserRepo;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Header from './components/common/header/header.component';\nimport UserRepo from './containers/user-repo/user-repo.component';\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<Header title=\"xillio\" />\n\t\t\t<div className=\"container\">\n\t\t\t\t<UserRepo />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}